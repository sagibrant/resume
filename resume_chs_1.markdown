# 🧾 简历 – 张杰

---

## 📌 个人信息

- **姓名：** 张杰  
- **性别：** 男  
- **出生日期：** 1988年10月  
- **出生地：** 中国上海  
- **电子邮箱：** [sagibrant@163.com](mailto:sagibrant@163.com)  
- **电话：** +86 136 1167 2073  
- **领英：** [linkedin.com/in/sagi-zhang-2845451b](https://www.linkedin.com/in/sagi-zhang-2845451b/)

---

## 🎓 教育背景

| 时间段               | 院校                      | 学位及专业                        |
|----------------------|---------------------------|------------------------------------|
| 2011年9月 – 2014年6月 | 华东师范大学              | 计算机软件与理论硕士              |
| 2007年9月 – 2011年6月 | 华东师范大学              | 软件工程学士                     |

---

## 💼 工作经历

| 时间段                  | 公司                              | 职位                    |
|------------------------|-----------------------------------|-------------------------|
| 2023年1月 – 2025年6月   | OpenText                          | 经理 I                  |
| 2017年7月 – 2023年1月   | Micro Focus                       | 经理 I                  |
| 2015年11月 – 2017年7月  | 惠普企业（HPE）                    | 高级软件工程师           |
| 2014年7月 – 2015年11月  | 惠普(HP)                          | 软件工程师               |

---

## 🧠 技术专长

- **编程语言：** C++、C#、JavaScript  
- **技术领域：** 浏览器扩展程序、Web自动化、AI驱动的自动化测试、云计算与DevOps、算法设计  
- **管理技能：** 六顶思考帽、SLII领导力、HBDI  

---

## 🌟 近期亮点

- **混合OCR解决方案：**  
  我开发了一种混合文本识别系统，通过整合本地OCR与DOM技术，显著提高了AI自动化测试中的文本识别准确性。该方案在本地部署环境中表现出色，超越了传统OCR引擎（如ABBYY和Tesseract）的性能和精度，为客户提供了更高效的自动化测试体验。

- **坐标转换算法：**  
  我设计了一种坐标转换算法，实现了屏幕坐标与浏览器Viewport坐标的精确映射，而且能兼容不同屏幕和浏览器缩放比。这一算法有效解决了自动化软件在UI检查和高亮功能中的坐标偏移问题，大幅提升了测试的精确度和用户体验。

---

## 🧾 专利

- **[Automated Identification of Input Elements in a GUI](https://patents.google.com/patent/US20220107883A1/en)**  
  *发明人:* Peng-Ji Yin, Cheng Hua, Jie Zhang  

- **[Recommending Programmatic Descriptions for Test Objects](https://patents.google.com/patent/US11698851B2/en)**  
  *发明人:* Peng-Ji Yin, Cheng Hua, Jie Zhang  

---

## 🚀 职业概述

我是一名经验丰富的软件工程师和技术管理者，拥有超过十年的UFT/QTP功能开发、现代化改造及性能优化经验。我专注于设计和交付复杂、可扩展的解决方案，能够快速解决客户关键难题，推动核心功能的研发及自动化工具的创新。通过技术创新与团队协作，我显著提升了产品的市场竞争力和客户满意度，并在全球分布式团队中促进高效协作，确保项目按时高质量交付。

---

## 💡 核心优势

- **🌐🧠 跨团队协作：**  
  我成功协调全球ALM、MC、SRF和AI团队的资源与专业能力，共同开发UFT核心功能，缩短开发周期并提升产品质量。

- **☁️⚙️ 云计算与DevOps：**  
  我在SRF和Digital Lab等SaaS平台中运用敏捷开发方法，快速迭代新功能，学习并运用TypeScript、AWS和Kubernetes实现了高效CI/CD流程。

- **🧹⚡ 代码库重构：**  
  我深入分析数百万行遗留代码，设计新的通信协议，重构UFT Web模块，使UFT Web性能提升三倍，同时保持向后兼容性。

- **🤖🔍 AI功能开发：**  
  我开发了一种混合文本识别系统，融合OCR与DOM技术，大幅提升了本地部署环境下的文本识别准确率，超越传统OCR引擎。

- **📐🖱 算法设计：**  
  我设计了一种高效的坐标转换算法，实现了屏幕与Viewport坐标的精确映射，解决了UI检查和高亮时的偏移问题，提升了测试可靠性。

---

## 🛠 项目经历

### **🧠📦 Unified Functional Testing（UFT/QTP） - *2014.7-2025.6***

作为UFT/QTP的核心开发者和团队管理者，我在过去十年中主导了多项关键功能的开发与优化，显著提升了工具的功能性、性能及市场竞争力。以下是我在项目中的主要贡献：

#### **🔹🤖🧠 UFT OCR改进 – *2024-2025***

- **背景：** UFT AI和TextObject依赖的传统OCR引擎在本地部署环境中准确性不足，引发客户强烈反馈。  
- **挑战：** 传统OCR引擎（如ABBYY和Tesseract）在复杂网页和多语言场景下表现欠佳，且客户无法使用云端OCR服务。  
- **解决方案：** 我设计并实现了一种混合文本识别系统，融合OCR与DOM技术，通过优化算法将处理时间从20秒缩短至2秒，并新增分词功能。  
- **成果：** 该系统在网页场景下实现了近100%的文本识别准确率，大幅提升了自动化测试的可靠性和效率，赢得客户一致好评。

#### **🔹🌐🧠 UFT Cloud Browser 重构 – *2024***

- **背景：** 旧版UFT Cloud Browser的设计限制了UFT AI功能的灵活性，无法满足客户需求。  
- **挑战：** UFT AI高度依赖COM对象和Windows Message，与Digital Lab的Java架构存在兼容性问题。  
- **解决方案：** 我主导重构通信框架，支持STD I/O、Windows Message和WebSocket；开发跨平台的鼠标和键盘模拟模块；重新设计自动化引擎以支持UFT Web和UFT AI。  
- **成果：** 交付了稳定、高效且易扩展的新版UFT Cloud Browser，成功支持UFT AI功能，并为未来扩展奠定了基础。

#### **🔹☁️🧪 UFT Cloud Browser (Quick-Win) – *2023***

- **背景：** SRF项目终止后，市场急需轻量级的云端浏览器自动化解决方案。  
- **挑战：** 预算和资源有限，需要快速交付成果。  
- **解决方案：** 我与Digital Lab团队合作，重用现有基础设施，简化设计并加速开发。  
- **成果：** 在4个月内，仅用4名开发人员完成了功能齐全的解决方案，研发效率远超SRF项目，展现了敏捷开发能力。

#### **🔹🧩🧪 UFT MV3扩展迁移 – *2022–2023***

- **背景：** Chromium废弃MV2，UFT Web Agent需迁移至MV3。  
- **挑战：** MV3对Extension API和CSP的限制影响了原有功能实现。  
- **解决方案：** 我重新设计消息架构，采用异步操作，成功绕过CSP限制。  
- **成果：** 顺利完成MV3迁移，保持与Chrome和Edge的兼容性，服务超10万客户，未收到重大问题反馈。

#### **🔹🧩⚡ UFT Web快速运行模式 – *2020–2021***

- **背景：** UFT Web在非IE浏览器上的性能下降，客户反馈执行时间过长。  
- **挑战：** 遗留代码规模庞大，通信开销高。  
- **解决方案：** 我分析了40万行代码，优化通信协议，引入原子消息机制，减少I/O开销。  
- **成果：** 性能提升3倍，VRI场景执行时间从3分钟缩短至5秒，显著提高了客户满意度。

#### **🔹🧠🔤 UFT TextObject功能 – *2019***

- **背景：** 安全限制导致传统自动化技术失效。  
- **挑战：** 在无脚本注入的环境下实现UI元素定位和交互。  
- **解决方案：** 我设计了TextObject功能，基于OCR技术定位UI元素并模拟用户交互。  
- **成果：** 提供了一个稳健的备用方案，满足了高安全要求客户的需求，填补了市场空白。

#### **🔹🧪⚙️ UFT Parallel Execution – *2018***

- **背景：** UFT不支持并行测试执行，影响客户生产效率。  
- **挑战：** 遗留代码依赖单一COM对象，无法支持并发。  
- **解决方案：** 我重构相关组件，移除单一依赖，实现并行执行功能。  
- **成果：** 开发了UFT ParallelRunner，支持多脚本并行执行，缩短测试周期，提升了市场竞争力。

#### **🔹☁️🧱 UFT Cloud Execution on SRF - *2016-2017***

- **背景：** SRF平台需支持UFT测试执行。  
- **挑战：** 初始EC2方案成本高且缺乏扩展性。  
- **解决方案：** 我引入Windows容器技术，降低成本并实现水平扩展。  
- **成果：** 成本降低75%，提升了平台可靠性，同时为公司创造了每年300-500万美元的额外收入。

#### **🔹📱🔗 HP/HPE Mobile Center集成 - *2016***

- **背景：** 需要支持移动浏览器测试。  
- **挑战：** 跨Addin桥接并实现TestObject共享。  
- **解决方案：** 我与MC创始人合作，设计并开发了桥接服务。  
- **成果：** 成功支持MC Browser，为跨浏览器测试奠定了基础。

#### **🔹📄🧾 UFT HTML Report Logger - *2015***

- **背景：** 旧版RRV效率低且不易分享。  
- **挑战：** 需设计一个轻量且易于分享的报告工具。  
- **解决方案：** 我开发了HTML Report Logger，通过监听ScriptEngine事件生成JSON数据。  
- **成果：** 显著提升了测试结果的展示与分享效率，使我成为团队的后端专家。

#### **🔹🖥️🔌 UFT Remote Agent - *2014***

- **背景：** 旧版Remote Agent维护困难且性能不佳。  
- **挑战：** 将9000行C++代码重构为C#并优化性能。  
- **解决方案：** 我分析代码，重新设计类结构，使用WPF重建UI并优化性能。  
- **成果：** 重构后的版本性能与旧版相当，可维护性显著提升，我因此获得“团队之星”奖。

---

## 🌍 其他项目

#### **🔹🍽️💳 Botion餐厅系统 • *2010年8月***

- **背景：** 我加入初创公司（xpfood.com），参与开发线下餐厅系统。  
- **贡献：** 我负责打印和会员卡功能的开发，并实现了与外卖系统的无缝集成。

---